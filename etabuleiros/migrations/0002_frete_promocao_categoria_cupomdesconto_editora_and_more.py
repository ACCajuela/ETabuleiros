# Generated by Django 5.2.1 on 2025-05-13 11:18

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('etabuleiros', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Frete',
            fields=[
                ('frete_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID do Frete')),
                ('cep_destino', models.CharField(help_text='Formato: 00000-000 ou 00000000', max_length=9, validators=[django.core.validators.MinLengthValidator(8)], verbose_name='CEP de Destino')),
                ('peso', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Peso (kg)')),
                ('valor_frete', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Valor do Frete')),
            ],
            options={
                'verbose_name': 'Frete',
                'verbose_name_plural': 'Fretes',
                'db_table': 'fretes',
                'ordering': ['-frete_id'],
            },
        ),
        migrations.CreateModel(
            name='Promocao',
            fields=[
                ('promocao_id', models.AutoField(primary_key=True, serialize=False)),
                ('nome_promocao', models.CharField(blank=True, max_length=255, null=True)),
                ('desconto', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('data_inicio', models.DateField(blank=True, null=True)),
                ('data_fim', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'promocoes',
            },
        ),
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('cat_id', models.AutoField(primary_key=True, serialize=False)),
                ('nome_categoria', models.CharField(db_index=True, error_messages={'unique': 'Esta categoria já existe.'}, max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Categoria',
                'verbose_name_plural': 'Categorias',
                'db_table': 'categorias',
                'constraints': [models.UniqueConstraint(fields=('nome_categoria',), name='nome_categoria_unico')],
            },
        ),
        migrations.CreateModel(
            name='CupomDesconto',
            fields=[
                ('cupom_id', models.AutoField(primary_key=True, serialize=False)),
                ('codigo', models.CharField(db_index=True, error_messages={'unique': 'Este código de cupom já existe.'}, max_length=50, unique=True, verbose_name='Código do Cupom')),
                ('desconto', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(100)], verbose_name='Percentual de Desconto')),
                ('data_expiracao', models.DateField(blank=True, null=True, verbose_name='Data de Expiração')),
            ],
            options={
                'verbose_name': 'Cupom de Desconto',
                'verbose_name_plural': 'Cupons de Desconto',
                'db_table': 'cupons_desconto',
                'constraints': [models.CheckConstraint(condition=models.Q(('desconto__gt', 0), ('desconto__lte', 100)), name='cupons_desconto_chk_1')],
            },
        ),
        migrations.CreateModel(
            name='Editora',
            fields=[
                ('editora_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID da Editora')),
                ('nome_editora', models.CharField(db_index=True, error_messages={'min_length': 'O nome deve conter pelo menos 2 caracteres.', 'unique': 'Já existe uma editora com este nome.'}, max_length=100, unique=True, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Nome da Editora')),
            ],
            options={
                'verbose_name': 'Editora',
                'verbose_name_plural': 'Editoras',
                'db_table': 'editoras',
                'ordering': ['nome_editora'],
                'constraints': [models.UniqueConstraint(condition=models.Q(('nome_editora__isnull', False)), fields=('nome_editora',), name='nome_editora_unico')],
            },
        ),
        migrations.CreateModel(
            name='Fornecedor',
            fields=[
                ('fornecedor_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID do Fornecedor')),
                ('nome_fornecedor', models.CharField(help_text='Nome completo do fornecedor', max_length=255, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Nome do Fornecedor')),
                ('endereco', models.CharField(blank=True, max_length=200, null=True, verbose_name='Endereço')),
                ('telefone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.MinLengthValidator(8)], verbose_name='Telefone')),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'Este e-mail já está cadastrado.'}, max_length=255, null=True, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='E-mail')),
            ],
            options={
                'verbose_name': 'Fornecedor',
                'verbose_name_plural': 'Fornecedores',
                'db_table': 'fornecedores',
                'ordering': ['nome_fornecedor'],
                'constraints': [models.UniqueConstraint(condition=models.Q(('email__isnull', False)), fields=('email',), name='email_unico')],
            },
        ),
        migrations.CreateModel(
            name='LogAcesso',
            fields=[
                ('log_acesso_id', models.AutoField(primary_key=True, serialize=False)),
                ('data_acesso', models.DateTimeField(auto_now_add=True, null=True)),
                ('status_acesso', models.CharField(blank=True, choices=[('sucesso', 'Sucesso'), ('falha', 'Falha')], max_length=7, null=True)),
                ('usuario', models.ForeignKey(blank=True, db_column='usuario_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'logs_acesso',
            },
        ),
        migrations.CreateModel(
            name='Notificacao',
            fields=[
                ('notificacao_id', models.AutoField(primary_key=True, serialize=False)),
                ('mensagem', models.TextField(blank=True, null=True)),
                ('data_envio', models.DateTimeField(auto_now_add=True, null=True)),
                ('lida', models.BooleanField(default=False)),
                ('usuario', models.ForeignKey(db_column='usuario_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notificacoes',
            },
        ),
        migrations.CreateModel(
            name='Pedido',
            fields=[
                ('ped_id', models.AutoField(primary_key=True, serialize=False)),
                ('status_ped', models.CharField(choices=[('em analise', 'Em Análise'), ('aprovado', 'Aprovado'), ('separado', 'Separado'), ('enviado', 'Enviado'), ('entregue', 'Entregue')], default='em analise', max_length=10)),
                ('forma_pagamento', models.CharField(choices=[('credito', 'Crédito'), ('debito', 'Débito'), ('pix', 'Pix')], max_length=7)),
                ('data_pedido', models.DateTimeField(auto_now_add=True, null=True)),
                ('cod_rast', models.CharField(blank=True, max_length=100, null=True)),
                ('id_user_ped', models.ForeignKey(db_column='id_user_ped', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pedidos',
            },
        ),
        migrations.CreateModel(
            name='HistoricoPagamento',
            fields=[
                ('pagamento_id', models.AutoField(primary_key=True, serialize=False)),
                ('valor_pago', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('metodo_pagamento', models.CharField(blank=True, choices=[('credito', 'Crédito'), ('debito', 'Débito'), ('pix', 'Pix')], max_length=7, null=True)),
                ('data_pagamento', models.DateTimeField(auto_now_add=True, null=True)),
                ('ped', models.ForeignKey(db_column='ped_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.pedido')),
            ],
            options={
                'db_table': 'historico_pagamentos',
            },
        ),
        migrations.CreateModel(
            name='PermissaoFuncionario',
            fields=[
                ('perm_id', models.AutoField(primary_key=True, serialize=False)),
                ('pode_editar_usuario', models.BooleanField(default=True)),
                ('pode_editar_pedido', models.BooleanField(default=True)),
                ('pode_ver_pagamento', models.BooleanField(default=False)),
                ('func', models.ForeignKey(db_column='func_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'permissoes_funcionarios',
            },
        ),
        migrations.CreateModel(
            name='Produto',
            fields=[
                ('prod_id', models.AutoField(primary_key=True, serialize=False)),
                ('nome_prod', models.CharField(blank=True, max_length=100, null=True)),
                ('qtd', models.IntegerField(blank=True, null=True)),
                ('preco', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('tempo_de_jogo', models.IntegerField(blank=True, null=True)),
                ('numero_jogadores', models.CharField(blank=True, max_length=20, null=True)),
                ('itens_inclusos', models.CharField(blank=True, max_length=200, null=True)),
                ('descri', models.CharField(blank=True, max_length=100, null=True)),
                ('clas_ind', models.CharField(blank=True, choices=[('L', 'L'), ('10', '10'), ('12', '12'), ('14', '14'), ('16', '16'), ('18', '18')], max_length=2, null=True)),
                ('autor', models.CharField(blank=True, max_length=200, null=True)),
                ('categoria', models.TextField(blank=True, null=True)),
                ('cat', models.ForeignKey(db_column='cat_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.categoria')),
                ('editora', models.ForeignKey(blank=True, db_column='editora_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='etabuleiros.editora')),
            ],
            options={
                'db_table': 'produtos',
            },
        ),
        migrations.CreateModel(
            name='PedidoProduto',
            fields=[
                ('ped_prod_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantidade', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('preco_unitario', models.DecimalField(decimal_places=2, max_digits=10)),
                ('ped', models.ForeignKey(db_column='ped_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.pedido')),
                ('prod', models.ForeignKey(db_column='prod_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.produto')),
            ],
            options={
                'db_table': 'pedido_produto',
            },
        ),
        migrations.CreateModel(
            name='ListaDesejos',
            fields=[
                ('id_des', models.AutoField(primary_key=True, serialize=False)),
                ('data_alteracao_LD', models.DateTimeField(auto_now_add=True, null=True)),
                ('id_des_user', models.ForeignKey(db_column='id_des_user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('id_des_prod', models.ForeignKey(blank=True, db_column='id_des_prod', null=True, on_delete=django.db.models.deletion.SET_NULL, to='etabuleiros.produto')),
            ],
            options={
                'db_table': 'lista_desejos',
            },
        ),
        migrations.CreateModel(
            name='ImagemProduto',
            fields=[
                ('imagem_id', models.AutoField(primary_key=True, serialize=False)),
                ('caminho_imagem', models.CharField(max_length=255)),
                ('ordem', models.IntegerField(default=1)),
                ('prod', models.ForeignKey(db_column='prod_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.produto')),
            ],
            options={
                'db_table': 'imagens_produtos',
            },
        ),
        migrations.CreateModel(
            name='HistoricoPreco',
            fields=[
                ('historico_preco_id', models.AutoField(primary_key=True, serialize=False)),
                ('preco_antigo', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('preco_novo', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('data_alteracao', models.DateTimeField(auto_now_add=True, null=True)),
                ('prod', models.ForeignKey(db_column='prod_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.produto')),
            ],
            options={
                'db_table': 'historico_precos',
            },
        ),
        migrations.CreateModel(
            name='HistoricoNavegacao',
            fields=[
                ('id_hist', models.AutoField(primary_key=True, serialize=False, verbose_name='ID do Histórico')),
                ('data_visualizacao', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Data de Visualização')),
                ('usuario', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='historico_navegacao', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
                ('produto', models.ForeignKey(db_column='prod_id', on_delete=django.db.models.deletion.CASCADE, related_name='visualizacoes', to='etabuleiros.produto', verbose_name='Produto')),
            ],
            options={
                'verbose_name': 'Histórico de Navegação',
                'verbose_name_plural': 'Histórico de Navegações',
                'db_table': 'historico_navegacao',
                'ordering': ['-data_visualizacao'],
            },
        ),
        migrations.CreateModel(
            name='Duvida',
            fields=[
                ('duvida_id', models.AutoField(primary_key=True, serialize=False)),
                ('pergunta', models.TextField(db_column='duvida', verbose_name='Pergunta')),
                ('resposta', models.TextField(blank=True, null=True, verbose_name='Resposta')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('data_resposta', models.DateTimeField(blank=True, null=True, verbose_name='Data de Resposta')),
                ('respondido_por', models.ForeignKey(blank=True, db_column='duvida_resposta_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='duvidas_respondidas', to=settings.AUTH_USER_MODEL)),
                ('usuario', models.ForeignKey(blank=True, db_column='duvida_user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='duvidas_enviadas', to=settings.AUTH_USER_MODEL)),
                ('produto', models.ForeignKey(blank=True, db_column='duvida_prod_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='duvidas', to='etabuleiros.produto')),
            ],
            options={
                'verbose_name': 'Dúvida',
                'verbose_name_plural': 'Dúvidas',
                'db_table': 'duvidas',
            },
        ),
        migrations.CreateModel(
            name='Devolucao',
            fields=[
                ('devolucao_id', models.AutoField(primary_key=True, serialize=False)),
                ('motivo', models.TextField(blank=True, null=True, verbose_name='Motivo da Devolução')),
                ('status_devolucao', models.CharField(choices=[('pendente', 'Pendente'), ('aprovada', 'Aprovada'), ('recusada', 'Recusada')], db_index=True, default='pendente', max_length=8, verbose_name='Status da Devolução')),
                ('data_solicitacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Solicitação')),
                ('pedido', models.ForeignKey(db_column='ped_id', on_delete=django.db.models.deletion.PROTECT, related_name='devolucoes', to='etabuleiros.pedido')),
                ('produto', models.ForeignKey(db_column='prod_id', on_delete=django.db.models.deletion.PROTECT, related_name='devolucoes', to='etabuleiros.produto')),
            ],
            options={
                'verbose_name': 'Devolução',
                'verbose_name_plural': 'Devoluções',
                'db_table': 'devolucoes',
            },
        ),
        migrations.CreateModel(
            name='CarrinhoCompras',
            fields=[
                ('carrinho_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantidade', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('data_adicao', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='carrinhos', to=settings.AUTH_USER_MODEL)),
                ('produto', models.ForeignKey(db_column='prod_id', on_delete=django.db.models.deletion.CASCADE, related_name='carrinhos', to='etabuleiros.produto')),
            ],
            options={
                'verbose_name': 'Carrinho de Compras',
                'verbose_name_plural': 'Carrinhos de Compras',
                'db_table': 'carrinho_compras',
            },
        ),
        migrations.CreateModel(
            name='AvaliacaoProduto',
            fields=[
                ('avaliacao_id', models.AutoField(primary_key=True, serialize=False)),
                ('nota', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comentario', models.TextField(blank=True, null=True)),
                ('data_avaliacao', models.DateTimeField(auto_now_add=True)),
                ('ava_user', models.ForeignKey(db_column='ava_user_id', on_delete=django.db.models.deletion.CASCADE, related_name='avaliacoes_produtos', to=settings.AUTH_USER_MODEL)),
                ('ava_prod', models.ForeignKey(db_column='ava_prod_id', on_delete=django.db.models.deletion.CASCADE, related_name='avaliacoes', to='etabuleiros.produto')),
            ],
            options={
                'verbose_name': 'Avaliação de Produto',
                'verbose_name_plural': 'Avaliações de Produtos',
                'db_table': 'avaliacoes_produtos',
            },
        ),
        migrations.CreateModel(
            name='ProdutoHistoricoNavegacao',
            fields=[
                ('prod_hist_id', models.AutoField(primary_key=True, serialize=False)),
                ('hist', models.ForeignKey(db_column='hist_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.historiconavegacao')),
                ('prod', models.ForeignKey(db_column='prod_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.produto')),
            ],
            options={
                'db_table': 'produtos_historico_navegacao',
            },
        ),
        migrations.CreateModel(
            name='ProdutoListaDesejos',
            fields=[
                ('prod_lista_id', models.AutoField(primary_key=True, serialize=False)),
                ('lista', models.ForeignKey(db_column='lista_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.listadesejos')),
                ('prod', models.ForeignKey(db_column='prod_id', on_delete=django.db.models.deletion.CASCADE, to='etabuleiros.produto')),
            ],
            options={
                'db_table': 'produtos_lista_desejos',
            },
        ),
        migrations.CreateModel(
            name='ReclamacaoSuporte',
            fields=[
                ('reclamacao_id', models.AutoField(primary_key=True, serialize=False)),
                ('assunto', models.CharField(blank=True, max_length=255, null=True)),
                ('descricao', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('aberta', 'Aberta'), ('em andamento', 'Em andamento'), ('resolvida', 'Resolvida')], default='aberta', max_length=20)),
                ('data_abertura', models.DateTimeField(auto_now_add=True, null=True)),
                ('resposta', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_respondeu', models.ForeignKey(blank=True, db_column='user_respondeu_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='respostas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reclamacoes_suporte',
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('acao', models.CharField(max_length=255)),
                ('descricao', models.TextField(blank=True, null=True)),
                ('data', models.DateTimeField(auto_now_add=True, null=True)),
                ('tipo_usuario', models.CharField(choices=[('usuario', 'Usuário'), ('funcionario', 'Funcionário'), ('administrador', 'Administrador')], max_length=13)),
                ('usuario', models.ForeignKey(blank=True, db_column='usuario_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'logs',
                'constraints': [models.CheckConstraint(condition=models.Q(('tipo_usuario', 'administrador')), name='logs_chk_1')],
            },
        ),
        migrations.CreateModel(
            name='FuncionarioPermissao',
            fields=[
                ('func_perm_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID da Permissão de Funcionário')),
                ('funcionario', models.ForeignKey(db_column='func_id', on_delete=django.db.models.deletion.CASCADE, related_name='permissoes_funcionario', to=settings.AUTH_USER_MODEL, verbose_name='Funcionário')),
                ('permissao', models.ForeignKey(db_column='permissao_id', on_delete=django.db.models.deletion.CASCADE, related_name='funcionarios_com_permissao', to='etabuleiros.permissaofuncionario', verbose_name='Permissão')),
            ],
            options={
                'verbose_name': 'Permissão de Funcionário',
                'verbose_name_plural': 'Permissões de Funcionários',
                'db_table': 'funcionarios_permissoes',
                'indexes': [models.Index(fields=['funcionario'], name='func_permissoes_usuarios_idx'), models.Index(fields=['permissao'], name='permissao_id_idx')],
                'constraints': [models.UniqueConstraint(fields=('funcionario', 'permissao'), name='unique_funcionario_permissao')],
            },
        ),
        migrations.AddIndex(
            model_name='historiconavegacao',
            index=models.Index(fields=['usuario'], name='user_id_idx'),
        ),
        migrations.AddIndex(
            model_name='historiconavegacao',
            index=models.Index(fields=['produto'], name='prod_id_idx'),
        ),
        migrations.AddIndex(
            model_name='duvida',
            index=models.Index(fields=['usuario'], name='duvida_user_id_idx'),
        ),
        migrations.AddIndex(
            model_name='duvida',
            index=models.Index(fields=['respondido_por'], name='duvida_resposta_id_idx'),
        ),
        migrations.AddIndex(
            model_name='duvida',
            index=models.Index(fields=['produto'], name='FK_duvidas_produtos_idx'),
        ),
        migrations.AddIndex(
            model_name='devolucao',
            index=models.Index(fields=['pedido'], name='devolucao_ped_id_idx'),
        ),
        migrations.AddIndex(
            model_name='devolucao',
            index=models.Index(fields=['produto'], name='devolucao_prod_id_idx'),
        ),
        migrations.AddConstraint(
            model_name='carrinhocompras',
            constraint=models.CheckConstraint(condition=models.Q(('quantidade__gt', 0)), name='carrinho_compras_chk_1'),
        ),
        migrations.AlterUniqueTogether(
            name='carrinhocompras',
            unique_together={('user', 'produto')},
        ),
        migrations.AddConstraint(
            model_name='avaliacaoproduto',
            constraint=models.CheckConstraint(condition=models.Q(('nota__gte', 1), ('nota__lte', 5)), name='avaliacoes_produtos_chk_1'),
        ),
    ]
